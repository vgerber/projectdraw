#version 330 core

in vec2 TexCoords;

out vec4 color;

uniform sampler2D screenTexture;

vec4 blur(sampler2D texture, vec2 coords);
vec4 fxaa(sampler2D texture, vec2 coords);

void main() {
	vec4 cTex = texture(screenTexture, TexCoords).rgba;
	color = fxaa(screenTexture, TexCoords);
}

vec4 blur(sampler2D tex, vec2 coords) {
	int samples = 0;

	vec4 color = vec4(0.0);
	vec2 texelSize = 1.0 / textureSize(tex, 0);	
	for(int x = -samples; x <= samples; x++) {
		for(int y = -samples; y <= samples; y++) {
			color += vec4(texture(tex, coords + vec2(x, y) * texelSize).rgba);
		}
	}
	color /= ((2 * samples + 1) * (2 * samples + 1));
	return color;
}

vec4 fxaa(sampler2D tex, vec2 coords) {
	float FXAA_SPAN_MAX = 10.0;
	float FXAA_REDUCE_MUL = 1.0/8.0;
	float FXAA_SUBPIX_SHIFT = 1.0/4.0;
	float FXAA_REDUCE_MIN = 1.0 / 128.0;

	vec2 texelSize = 1.0 / textureSize(tex, 0);	

	vec3 rgbNW = texture(tex, coords.xy + vec2(0, 0) * texelSize).xyz;
    vec3 rgbNE = texture(tex, coords.xy + vec2(1, 0) * texelSize).xyz;
    vec3 rgbSW = texture(tex, coords.xy + vec2(0, 1) * texelSize).xyz;
    vec3 rgbSE = texture(tex, coords.xy + vec2(1, 1) * texelSize).xyz;
    vec3 rgbM  = texture(tex, coords.xy).xyz;

	vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);

	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

	vec2 dir; 
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * texelSize.xy;
    
	vec3 rgbA = (1.0/2.0) * (
        texture(tex, coords.xy + dir * (1.0/3.0 - 0.5)).xyz +
        texture(tex, coords.xy + dir * (2.0/3.0 - 0.5)).xyz);

    vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
        texture(tex, coords.xy + dir * (0.0/3.0 - 0.5)).xyz +
        texture(tex, coords.xy + dir * (3.0/3.0 - 0.5)).xyz);

    float lumaB = dot(rgbB, luma);

    if((lumaB < lumaMin) || (lumaB > lumaMax)) 
		return vec4(rgbA, 1.0);

    return vec4(rgbB, texture(tex, coords).a);
}