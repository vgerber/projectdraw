#version 330 core
in vec2 TexCoords;

out vec4 color;

#define DIR_SPLITS 3

struct DirLight {
	bool drawShadow;

	float intensity;
	float farPlane;

	vec3 direction;


	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	sampler2D[DIR_SPLITS] shadowMap;
	mat4[DIR_SPLITS] lightSpaceMatrix;
};

struct PointLight {
	float intensity;
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight {
	float intensity; 
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define MAX_PLIGHTS 5

uniform DirLight dirLight;
uniform SpotLight spotLight;
uniform PointLight pointLight[MAX_PLIGHTS];
uniform int pointLights;

uniform vec3 viewPos;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gUseLight;

uniform float weight[10] = float[] (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1);

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec4 fragPos, vec3 color);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color);

float LinearizeDepth(float depth);
float ShadowDirCalculation(DirLight light, vec4 fragPosLightSpace, float bias);


void main() {
	vec3 Normal = texture(gNormal, TexCoords).rgb;
	vec3 FragPos = texture(gPosition, TexCoords).rgb;
	vec3 Color = texture(gAlbedo, TexCoords).rgb;
	vec3 viewDir = normalize(viewPos - FragPos);    
	float UseLight = texture(gUseLight, TexCoords).r;     
	
	
	if(UseLight == 1.0) {
				
		vec3 result = vec3(0.0);
		if(pointLights != 0) {
			for(int i = 0; i < pointLights; i++){ 
				result += CalcPointLight(pointLight[i], Normal, FragPos, viewDir, Color) * pointLight[i].intensity;
			}
		}
		result += CalcSpotLight(spotLight, Normal, FragPos, viewDir, Color);
		result += CalcDirLight(dirLight, Normal, viewDir, vec4(FragPos, 1.0), Color) * dirLight.intensity;		
			


		//gamma correction
		float gamma = 1.2;
		result.rgb = pow(result, vec3(1.0 / gamma));

		color = vec4(result.rgb, 1.0);
	}
	else {
		color = vec4(Color.rgb, 1.0);
	}	
	
}