#version 330 core

out vec4 color;

in VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
	vec3 ViewPos;
	vec3 ViewDir;
} fs_in;


struct DirLight {
	float intensity;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 color) {
	vec3 lightDir = normalize(-light.direction);
	vec3 norm = normalize(normal);

	vec3 ambient = light.ambient;

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff;

	// Specular
    vec3 reflectDir = reflect(-lightDir, norm);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, reflectDir), 0.0), 32);    
    vec3 specular = light.specular * spec;  
	

	return (ambient + diffuse + specular) * color;
}

uniform DirLight directionalLight;



uniform float useLight = 1.0;

uniform int enableCustomColor = 0;
uniform vec4 customColor = vec4(1.0);

uniform float glow = 0.0;

uniform float alphaDiscardThreshold = 0.4;

uniform int enableAlphaTexture = 0;
uniform int enableDiffuseTexture = 0;
uniform int enableSpecularTexture = 0;

uniform sampler2D alphaTexture;
uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;

void main() {
	//discard pixels which are below the alpha threshold
	if(enableAlphaTexture == 1) {
		if(texture(alphaTexture, fs_in.TexCoords).r <= alphaDiscardThreshold) {
			discard;
		}
	}

	vec4 albedoColor;

	//set color from texture (if not enabled color will be vertex color or custom set color)
	if(enableDiffuseTexture == 1) {
		albedoColor = texture(diffuseTexture, fs_in.TexCoords);
		if(albedoColor.a <= alphaDiscardThreshold) {
			discard;
		}
	}
	else {
		if(enableCustomColor == 0) {
			albedoColor = fs_in.Color;
		}
		else {
			albedoColor = customColor;
		}
	}
	if(enableSpecularTexture == 1) {
		albedoColor.a = texture(specularTexture, fs_in.TexCoords).r;
	}
	color =  vec4(CalcDirLight(directionalLight, fs_in.Normal, fs_in.ViewPos - fs_in.FragPos , fs_in.FragPos, albedoColor.rgb), albedoColor.a);
}