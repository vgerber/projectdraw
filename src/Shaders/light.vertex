#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;


out vec3 Color;


uniform vec3 color;
uniform float intensity;

layout (std140) uniform Matrices {
	uniform mat4 view;
	uniform mat4 projection;
	uniform float farPlane;
};

out VS_OUT {
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
} vs_out;

uniform mat4 model;

void main() {
	gl_Position = projection * view * model * vec4(position.x, position.y, position.z, 1.0f);
	vs_out.Normal = mat3(transpose(inverse(model))) * normal;
	vs_out.FragPos = vec3(model * vec4(position, 1.0f));
	vs_out.Color = vec4(color * intensity, 1.0);
}