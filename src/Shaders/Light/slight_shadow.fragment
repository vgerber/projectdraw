#version 330 core

struct SpotLight {
	float intensity;

	float linear;
	float constant;
	float quadratic;

	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

    sampler2D shadowMap;
    mat4 lightSpaceMatrix;
};


float CalcSpotLightShadow(SpotLight light, vec3 fragPos, float bias);

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color) {  
	vec3 lightDir = normalize(light.position - fragPos);
  	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	// Diffuse     
	float diff = max(dot(normal, lightDir), 0.0);	
    
	// Specular
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	
	vec3 ambient = light.ambient * color.rgb;
	vec3 diffuse = light.diffuse * diff * color.rgb;  
	vec3 specular = light.specular * spec * color.rgb;    


	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * distance * distance);

	diffuse *= intensity;
	specular *= intensity;


    //float bias = max(0.0035 * (1.0 - dot(normal, light.direction)), 0.005);
    //float shadow = CalcSpotLightShadow(light, fragPos, bias);

	//return (ambient + (1.0 - shadow) * (diffuse + specular)) * attenuation;
    return vec3(1.0, 0.0, 0.0);
}

float CalcSpotLightShadow(SpotLight light, vec3 fragPos, float bias) {

	vec4 fragPosLightSpace = light.lightSpaceMatrix * vec4(fragPos, 1.0);

	//perspective divide
	vec3 projCoords = fragPosLightSpace.xyz;

	//Transform from [-1,1] to [0,1]
	projCoords = projCoords * 0.5f + 0.5f;

	//Get closest depth value from lights perspective
	float closestDepth = texture(light.shadowMap, projCoords.xy).r;

	//get depth of current fragment from lights perspective
	float currentDepth = projCoords.z;

	//check wether current frag pos is in shadow
	//float shadow = currentDepth - bias > closestDepth ? 1.0f : 0.0f;
	float shadow = 0.0;

	//texel attempt (pcf)
	vec2 texelSize = 1.0 / textureSize(light.shadowMap, 0);
			
	for(int x = -1; x <= 1; ++x) {
		for(int y = -1; y <= 1; ++y) {
			float pcfDepth = texture(light.shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= (9.0f) ;
	if(projCoords.z > 1.0)
		shadow = 0.0;

	return shadow;
	
}

