#version 330 core

struct SpotLight {
	float intensity;
	float farPlane;
	
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

    sampler2D shadowMap;
    mat4 lightSpaceMatrix;
};


float CalcSpotLightShadow(SpotLight light, vec3 fragPos, float bias);

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color) {  
	vec3 lightDir = normalize(light.position - fragPos);
  	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	// Diffuse     
	float diff = max(dot(normal, lightDir), 0.0);	
    
	// Specular
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	
	vec3 ambient = light.ambient * color.rgb;
	vec3 diffuse = light.diffuse * diff * color.rgb;  
	vec3 specular = light.specular * spec * color.rgb;    


	float distance = length(light.position - fragPos);
	float attenuation = (1.0 - (distance / light.farPlane));

	diffuse *= intensity ;
	specular *= intensity;


    float bias = 0.000005;
    float shadow = CalcSpotLightShadow(light, fragPos, bias);

	return (ambient + (1.0 - shadow) * (diffuse + specular)) * attenuation;
}

float CalcSpotLightShadow(SpotLight light, vec3 fragPos, float bias) {

	vec4 fragPosLightSpace = light.lightSpaceMatrix * vec4(fragPos, 1.0);

	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	

	float closestDepth = texture(light.shadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;

	float shadow = 0.0;
	if(currentDepth - bias > closestDepth) {
		shadow = 1.0;
	}
	return shadow;
	
}

