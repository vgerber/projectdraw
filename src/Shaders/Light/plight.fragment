#version 330 core

struct PointLight {
	float intensity;
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float radius;

	float constant;
	float linear;
	float quadratic;
};

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color) {
	vec3 surfaceToLight = light.position - fragPos;
	float distance = length(surfaceToLight);

	float attenuation = 0.0;
	if(distance <= light.radius) {
		attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
	}



  	
    // Diffuse 
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);    
    
    // Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 256.0f);
    

	vec3 ambient = light.ambient * color.rgb;
	vec3 diffuse = light.diffuse * diff *  color.rgb;
	vec3 specular = light.specular * spec * color.rgb;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

    return (ambient + diffuse + specular);
}