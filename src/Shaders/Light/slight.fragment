#version 330 core

struct SpotLight {
	float intensity;
	float farPlane;

	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color) {  
	vec3 lightDir = normalize(light.position - fragPos);
  	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	// Diffuse     
	float diff = max(dot(normal, lightDir), 0.0);	
    
	// Specular
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	
	vec3 ambient = light.ambient * color.rgb;
	vec3 diffuse = light.diffuse * diff * color.rgb;  
	vec3 specular = light.specular * spec * color.rgb;    


	float distance = length(light.position - fragPos);
	float attenuation = (1.0 - (distance / light.farPlane));

	diffuse *= intensity ;
	specular *= intensity;
	
	return (ambient + diffuse + specular) * attenuation;
}
