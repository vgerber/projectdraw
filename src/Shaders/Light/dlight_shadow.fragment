#version 330 core

#define DIR_SPLITS 3

struct DirLight {
	bool drawShadow;

	float intensity;
	float farPlane;

	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	sampler2D[DIR_SPLITS] shadowMap;
	mat4[DIR_SPLITS] lightSpaceMatrix;
};

float gaussian[] = float[7](0.01, 0.2, 0.8, 1.0, 0.8, 0.2, 0.01);

//fragPos [xyz] coordinates
float ShadowDirCalculation(DirLight light, vec3 fragPos, float depth, float bias);
float SamplerVDirLight(sampler2D shadowMap, vec2 coords, float compare);

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragPos, float depth, vec3 color) {
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normal, lightDir), 0.0);

	// Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 32.0f);


    vec3 diffuse = light.diffuse * diff *  color.rgb;
    vec3 specular = light.specular * spec * color.rgb;  
	vec3 ambient = light.ambient * color.rgb;

	float bias = max(0.0035 * (1.0 - dot(normal, lightDir)), 0.005);

	float shadow = 0.0;
	if(light.drawShadow) {
		shadow = ShadowDirCalculation(light, fragPos, depth,  bias);
	}

	
/*
	if(depth <= 0.1) {
		return vec3(1,0,0);
	}
	else if(depth <= 0.5) {
		return vec3(0,1,0);
	}
	else {
		return vec3(0,0,1);
	}
*/
	return (ambient + (1.0 - shadow) * (diffuse + specular));
}

float ShadowDirCalculation(DirLight light, vec3 fragPos, float depth, float bias) {

	int shadowMapIndex = 0;


	if(depth <= 0.2) {
		shadowMapIndex = 0;
	}
	else if(depth <= 0.5) {
		shadowMapIndex = 1;
	}
	else {
		shadowMapIndex = 2;
	}
	
	if(shadowMapIndex == 0) {
		vec4 fragPosLightSpace = light.lightSpaceMatrix[0] * vec4(fragPos, 1.0);
		vec3 projCoords = fragPosLightSpace.xyz;
		projCoords = projCoords * 0.5f + 0.5f;
		float closestDepth = texture(light.shadowMap[0], projCoords.xy).r;
		float currentDepth = projCoords.z;
		float shadow = 0.0;
		vec2 texelSize = 1.0 / textureSize(light.shadowMap[0], 0);				
		for(int x = -3; x <= 3; ++x) {
			for(int y = -3; y <= 3; ++y) {
				shadow += (1.0 - SamplerVDirLight(light.shadowMap[0], projCoords.xy + vec2(x, y) * texelSize, projCoords.z)) * gaussian[x + 3] * gaussian[y + 3];
			}
		}
		shadow /= (13.0f) ;
		if(projCoords.z > 1.0)
			shadow = 0.0;
		if(shadow > 0.0)
			return shadow;
	}
	if(shadowMapIndex == 1) {
		vec4 fragPosLightSpace = light.lightSpaceMatrix[1] * vec4(fragPos, 1.0);
		vec3 projCoords = fragPosLightSpace.xyz;
		projCoords = projCoords * 0.5f + 0.5f;
		float closestDepth = texture(light.shadowMap[1], projCoords.xy).r;
		float currentDepth = projCoords.z;
		float shadow = 0.0;
		vec2 texelSize = 1.0 / textureSize(light.shadowMap[1], 0);				
		for(int x = -3; x <= 3; ++x) {
			for(int y = -3; y <= 3; ++y) {
				shadow += (1.0 - SamplerVDirLight(light.shadowMap[1], projCoords.xy + vec2(x, y) * texelSize, projCoords.z)) * gaussian[x + 3] * gaussian[y + 3];
			}
		}
		shadow /= (13.0f) ;
		if(projCoords.z > 1.0)
			shadow = 0.0;
		if(shadow > 0.0)
			return shadow;
	}
	if(shadowMapIndex == 2) {
		vec4 fragPosLightSpace = light.lightSpaceMatrix[2] * vec4(fragPos, 1.0);
		vec3 projCoords = fragPosLightSpace.xyz;
		projCoords = projCoords * 0.5f + 0.5f;
		float closestDepth = texture(light.shadowMap[2], projCoords.xy).r;
		float currentDepth = projCoords.z;
		float shadow = 0.0;
		vec2 texelSize = 1.0 / textureSize(light.shadowMap[2], 0);				
		for(int x = -3; x <= 3; ++x) {
			for(int y = -3; y <= 3; ++y) {
				shadow += (1.0 - SamplerVDirLight(light.shadowMap[2], projCoords.xy + vec2(x, y) * texelSize, projCoords.z)) * gaussian[x + 3] * gaussian[y + 3];
			}
		}
		shadow /= (13.0f) ;
		if(projCoords.z > 1.0)
			shadow = 0.0;
		if(shadow > 0.0)
			return shadow;
	}
}

float linestep(float low, float high, float v) {
	return clamp((v - low) / (high - low), 0.0, 1.0);
} 

float SamplerVDirLight(sampler2D shadowMap, vec2 coords, float compare) {
	
	vec2 moments = texture2D(shadowMap, coords.xy).xy;
	float p = step(compare, moments.x);
	float variance = max(moments.y - moments.x * moments.x, 0.000002);

	float d = compare - moments.x;
	float pMax = linestep(0.2, 1.0, variance / (variance + d * d));

	return min(max(p, pMax), 1.0);
}