#version 330 core

#define DIR_SPLITS 3

struct DirLight {
	bool drawShadow;

	float intensity;
	float farPlane;

	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	sampler2D[DIR_SPLITS] shadowMap;
	mat4[DIR_SPLITS] lightSpaceMatrix;
};


//fragPos [xyz] coordinates
float ShadowDirCalculation(DirLight light, vec3 fragPos, float depth, float bias);

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragPos, float depth, vec3 color) {
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normal, lightDir), 0.0);

	// Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 32.0f);


    vec3 diffuse = light.diffuse * diff *  color.rgb;
    vec3 specular = light.specular * spec * color.rgb;  
	vec3 ambient = light.ambient * color.rgb;

	float bias = max(0.0035 * (1.0 - dot(normal, lightDir)), 0.005);

	float shadow = 0.0;
	if(light.drawShadow) {
		shadow = ShadowDirCalculation(light, fragPos, depth,  bias);
	}


//	if(depth >= 0.012) {
//		return vec3(1,0,0);
//	}
//	else if(depth < 0.012 && depth >= 0.005) {
//		return vec3(0,1,0);
//	}
//	else {
//		return vec3(0,0,1);
//	}
	return (ambient + (1.0 - shadow) * (diffuse + specular));
}

float ShadowDirCalculation(DirLight light, vec3 fragPos, float depth, float bias) {

	int shadowMapIndex = 0;


	if(depth >= 0.015) {
		shadowMapIndex = 0;
	}
	else if(depth < 0.015 && depth >= 0.005) {
		shadowMapIndex = 1;
	}
	else {
		shadowMapIndex = 2;
	}

	vec4 fragPosLightSpace = light.lightSpaceMatrix[shadowMapIndex] * vec4(fragPos, 1.0);

	//perspective divide
	vec3 projCoords = fragPosLightSpace.xyz;

	//Transform from [-1,1] to [0,1]
	projCoords = projCoords * 0.5f + 0.5f;

	//Get closest depth value from lights perspective
	float closestDepth = texture(light.shadowMap[shadowMapIndex], projCoords.xy).r;

	//get depth of current fragment from lights perspective
	float currentDepth = projCoords.z;

	//check wether current frag pos is in shadow
	//float shadow = currentDepth - bias > closestDepth ? 1.0f : 0.0f;
	float shadow = 0.0;

	//texel attempt (pcf)
	vec2 texelSize = 1.0 / textureSize(light.shadowMap[shadowMapIndex], 0);
			
	for(int x = -1; x <= 1; ++x) {
		for(int y = -1; y <= 1; ++y) {
			float pcfDepth = texture(light.shadowMap[shadowMapIndex], projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= (9.0f) ;
	if(projCoords.z > 1.0)
		shadow = 0.0;

	return shadow;
}