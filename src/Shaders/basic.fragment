#version 330 core

layout (location = 0) out vec4 Position;
layout (location = 1) out vec4 Normal;
layout (location = 2) out vec4 Albedo;

in VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
	vec3 ViewPos;
	vec4 FragPosLightSpace;
} fs_in;


struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};



uniform DirLight dirLight;
uniform PointLight pointLight;

uniform Material material;
uniform vec3 viewPos;

uniform vec3 customColor;
//uniform sampler2D customTexture;

//uniform sampler2D tex;


uniform sampler2D shadowMap;
uniform samplerCube shadowCubeMap;
uniform vec3 lightPos;
uniform float far_plane;




vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

float LinearizeDepth(float depth);
float ShadowCalculation(vec4 fragPosLightSpace, float bias);
float ShadowPointCalculation(PointLight light, vec3 fragPos);


void main() {
	vec3 normal = normalize(fs_in.Normal);
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);  	
       
	    
	/*
	vec3 result = CalcPointLight(pointLight, normal, fs_in.FragPos, viewDir);

	//bloom only for point and spot ligths
	float brightness = dot(result, vec3(0.2126, 0.7152, 0.0722));

    result += CalcDirLight(dirLight, normal, viewDir);
	


    //vec3 depth =  vec3(LinearizeDepth(gl_FragCoord.z));
	//if (tex_vec.a <= 0.1)
	//	discard;

	//gamma correction
	float gamma = 1.0;
	result.rgb = pow(result.rgb, vec3(1.0 / gamma));
    Color = vec4(result, 1.0f);

	Gray = vec4(vec3((result.r + result.g + result.b) / 3.0), 1.0);
	*/


	Albedo = fs_in.Color;
	Position = vec4(fs_in.FragPos, 1.0);
	Normal = vec4(normal, 1.0);

}

float LinearizeDepth(float depth) {
    float near = 0.1;
    float far = 100.0;
    float z = depth * 2.0 - 1.0;
    return (2.0 * near) / (far + near - z * (far - near));
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(-light.direction);

	float diff = max(dot(normal, lightDir), 0.0);

	// Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 32.0f);


    vec3 diffuse = light.diffuse * diff *  fs_in.Color.rgb;
    vec3 specular = light.specular * spec * fs_in.Color.rgb;  
	vec3 ambient = light.ambient * fs_in.Color.rgb;

	float bias = max(0.000001 * (1.0 - dot(normal, lightDir)), 0.000001);
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, bias);

	return (ambient + (1.0 - shadow) * (diffuse + specular));
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * distance);
	
  	
    // Diffuse 
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);    
    
    // Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 32.0f);
    

	vec3 ambient = light.ambient * fs_in.Color.rgb;
	vec3 diffuse = light.diffuse * diff *  fs_in.Color.rgb;
	vec3 specular = light.specular * spec * fs_in.Color.rgb;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	float shadow = ShadowPointCalculation(light, fragPos);
    return (ambient + (1.0 - shadow) * (diffuse + specular));
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {  
	/*vec3 lightDir = normalize(light.position - fragPos);
  	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	// Diffuse     
	float diff = max(dot(normal, lightDir), 0.0);	
    
	// Specular
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));  
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));    

	diffuse *= intensity;
	specular *= intensity;


	return (ambient + diffuse + specular);  */
	return vec3(1.0);
}

float ShadowCalculation(vec4 fragPosLightSpace, float bias) {
	//perspective divide
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

	//Transform from [-1,1] to [0,1]
	projCoords = projCoords * 0.5f + 0.5f;

	//Get closest depth value from lights perspective
	float closestDepth = texture(shadowMap, projCoords.xy).r;

	//get depth of current fragment from lights perspective
	float currentDepth = projCoords.z;

	//check wether current frag pos is in shadow
	//float shadow = currentDepth - bias > closestDepth ? 1.0f : 0.0f;
	float shadow = 0.0;

	//texel attempt (pcf)
	//float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x) {
		for(int y = -1; y <= 1; ++y) {
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0;
	if(projCoords.z > 1.0)
		shadow = 0.0;
	return shadow;
}

float ShadowPointCalculation(PointLight light, vec3 fragPos) {
	vec3 fragToLight = fragPos - light.position;
	float closestDepth = texture(shadowCubeMap, fragToLight).r;
	closestDepth *= far_plane;
	float currentDepth = length(fragToLight);
	float shadow  = 0.0;
	float bias    = 0.00001; 
	float samples = 4.0;
	float offset  = 0.01;
	for(float x = -offset; x < offset; x += offset / (samples * 0.5))
	{
		for(float y = -offset; y < offset; y += offset / (samples * 0.5))
		{
			for(float z = -offset; z < offset; z += offset / (samples * 0.5))
			{
				float closestDepth = texture(shadowCubeMap, fragToLight + vec3(x, y, z)).r; 
				closestDepth *= far_plane;   // Undo mapping [0;1]
				if(currentDepth - bias > closestDepth)
					shadow += 1.0;
			}
		}
	}
	shadow /= (samples * samples * samples);
	return shadow;
}