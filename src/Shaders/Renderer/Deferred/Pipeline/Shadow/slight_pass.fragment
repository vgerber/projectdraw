#version 330 core
in vec2 TexCoords;

out vec4 color;

struct SpotLight {
	float intensity;
	float farPlane;
	
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

    sampler2D shadowMap;
    mat4 lightSpaceMatrix;
};

#define MAX_LIGHTS 10

uniform SpotLight spotLight[MAX_LIGHTS];

uniform int spotLights;

uniform vec3 viewPos;


uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gOption1;
uniform sampler2D prevTexture;

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color);

void main() {
	vec3 Normal = texture(gNormal, TexCoords).rgb;
	vec3 FragPos = texture(gPosition, TexCoords).rgb;
	vec4 Color = texture(gAlbedo, TexCoords).rgba;
	vec4 prevColor = texture(prevTexture, TexCoords).rgba;
	vec3 viewDir = normalize(viewPos - FragPos);    
	float UseLight = texture(gOption1, TexCoords).r;     
	float Depth = texture(gOption1, TexCoords).g;	
		
	color = vec4(prevColor.rgb, 1.0);
	if(UseLight == 1.0) {				
		vec3 result = vec3(0.0);
		if(spotLights != 0) {
			for(int i = 0; i < spotLights; i++){ 
				result += CalcSpotLight(spotLight[i], Normal, FragPos, viewDir, Color.rgb) * spotLight[i].intensity;
			}
		}
		color += vec4(result.rgb, 0.0);
	}
	else {
		color = vec4(Color.rgb, Color.a);
	}
}