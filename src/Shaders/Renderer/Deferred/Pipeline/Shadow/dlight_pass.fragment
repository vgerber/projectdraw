#version 330 core
in vec2 TexCoords;

out vec4 color;

#define DIR_SPLITS 3

struct DirLight {
	bool drawShadow;

	float intensity;
	float farPlane;

	vec3 direction;


	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	sampler2D[DIR_SPLITS] shadowMap;
	mat4[DIR_SPLITS] lightSpaceMatrix;
};

uniform DirLight dirLight;

uniform vec3 viewPos;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D gOption1;


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragPos, float depth, vec3 color);


float ShadowDirCalculation(DirLight light, vec4 fragPosLightSpace, float depth, float bias);


void main() {
	vec3 Normal = texture(gNormal, TexCoords).rgb;
	vec3 FragPos = texture(gPosition, TexCoords).rgb;
	vec4 Color = texture(gAlbedo, TexCoords).rgba;
	vec3 viewDir = normalize(viewPos - FragPos);    
	float UseLight = texture(gOption1, TexCoords).r;     
	float Depth = texture(gOption1, TexCoords).g;
	
	
	if(UseLight == 1.0) {
		vec3 result = vec3(0.0);
		result += (CalcDirLight(dirLight, Normal, viewDir, FragPos, Depth, Color.rgb) + vec3(0.01, 0.01, 0.01)) * dirLight.intensity;		

		color = vec4(result.rgb, Color.a);
	}
	else {
		color = vec4(Color.rgb, Color.a);
	}	
}
