#version 330 core

layout (location = 0) out vec4 Position;
layout (location = 1) out vec4 Normal;
layout (location = 2) out vec4 Albedo;
layout (location = 3) out vec4 Option1;
layout (location = 4) out vec4 Glow;

in VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
	float Depth;
} fs_in;


uniform float useLight = 1.0;

uniform int enableCustomColor = 0;
uniform vec4 customColor = vec4(1.0);

uniform float glow = 0.0;

uniform float alphaDiscardThreshold = 0.4;

uniform int enableAlphaTexture = 0;
uniform int enableDiffuseTexture = 0;
uniform int enableSpecularTexture = 0;

uniform sampler2D alphaTexture;
uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;

void main() {
	vec3 normal = normalize(fs_in.Normal);


	//discard pixels which are below the alpha threshold
	if(enableAlphaTexture == 1) {
		if(texture(alphaTexture, fs_in.TexCoords).r <= alphaDiscardThreshold) {
			discard;
		}
	}

	vec4 albedoColor;

	//set color from texture (if not enabled color will be vertex color or custom set color)
	if(enableDiffuseTexture == 1) {
		albedoColor = texture(diffuseTexture, fs_in.TexCoords);
		if(albedoColor.a <= alphaDiscardThreshold) {
			discard;
		}
	}
	else {
		if(enableCustomColor == 0) {
			albedoColor = fs_in.Color;
		}
		else {
			albedoColor = customColor;
		}
	}
	if(enableSpecularTexture == 1) {
		albedoColor.a = texture(specularTexture, fs_in.TexCoords).r;
	}
	Albedo = albedoColor;
	Position = vec4(vec3(fs_in.FragPos.xyz), 1.0);
	Normal = vec4(normal, 1.0);
	Option1 = vec4(useLight, fs_in.Depth, 0.0, 1.0);
	Glow = vec4(vec3(glow), 1.0f);
}