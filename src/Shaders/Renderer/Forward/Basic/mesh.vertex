#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec4 color;

layout (std140) uniform Matrices {
	uniform mat4 view;
	uniform mat4 projection;
	uniform float farPlane;
};

out VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
	vec3 ViewPos;
	vec3 ViewDir;
} vs_out;


uniform mat4 mvp;
uniform mat4 model;

uniform vec3 viewPos;

//uniform vec3 lightPos;

void main() {
	gl_Position = mvp * vec4(position.xyz, 1.0f);
	vs_out.TexCoords = texCoord;
	vs_out.Normal = mat3(transpose(inverse(model))) * normal;
	vec3 fragPos = vec3(model * vec4(position, 1.0f));
	vs_out.FragPos = fragPos;
	vs_out.ViewPos = viewPos;
	vs_out.ViewDir = fragPos - viewPos;
	vs_out.Color = color;


}