#version 330 core

out vec4 FragColor;

in VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec3 ScreenPos;
	vec4 Color;
	vec3 ViewPos;
	vec3 ViewDir;
} fs_in;

struct DirLight {
	float intensity;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

const float PI = 3.14159265359;




uniform DirLight directionalLight;



uniform float useLight = 1.0;

uniform int enableCustomColor = 0;
uniform vec4 customColor = vec4(1.0);

uniform float glow = 0.0;

uniform float alphaDiscardThreshold = 0.4;

uniform int enableAlphaTexture = 0;
uniform int enableDiffuseTexture = 0;
uniform int enableSpecularTexture = 0;

uniform sampler2D ssaoTexture;

uniform sampler2D alphaTexture;
uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;


float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);

vec3 calcPBELight(vec3 Normal, vec3 WorldPos, vec3 camPos, vec3 Albedo, DirLight light);
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewPos, vec3 fragPos, vec3 color);  


void main() {
	//discard pixels which are below the alpha threshold
	if(enableAlphaTexture == 1) {
		if(texture(alphaTexture, fs_in.TexCoords).r <= alphaDiscardThreshold) {
			discard;
		}
	}

	vec4 albedoColor;

	//set color from texture (if not enabled color will be vertex color or custom set color)
	if(enableDiffuseTexture == 1) {
		albedoColor = texture(diffuseTexture, fs_in.TexCoords);
		if(albedoColor.a <= alphaDiscardThreshold) {
			discard;
		}
	}
	else {
		if(enableCustomColor == 0) {
			albedoColor = fs_in.Color;
		}
		else {
			albedoColor = customColor;
		}
	}
	if(enableSpecularTexture == 1) {
		albedoColor.a = texture(specularTexture, fs_in.TexCoords).r;
	}

	vec2 modScreenPos = vec2(
		gl_FragCoord.x / 700.0,
		gl_FragCoord.y / 700.0
	);

	FragColor = vec4(CalcDirLight(directionalLight, fs_in.Normal, fs_in.ViewPos , fs_in.FragPos, albedoColor.rgb) * (texture(ssaoTexture, modScreenPos).r * 2.0), albedoColor.a);
	//FragColor = vec4(calcPBELight(fs_in.Normal, fs_in.FragPos, fs_in.FragPos - directionalLight.direction, albedoColor.rgb, directionalLight), albedoColor.a);
}

vec3 calcPBELight(vec3 Normal, vec3 WorldPos, vec3 camPos, vec3 Albedo, DirLight light) {
	float metallic = 1.0;
	float roughness = 0.0;
	float ao = 1.0;

	vec3 N = normalize(Normal);
    vec3 V = normalize(camPos - WorldPos);

    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, Albedo, metallic);
	           
    // reflectance equation
    vec3 Lo = vec3(0.0);

	// calculate per-light radiance
	vec3 L = normalize(light.direction);
	vec3 H = normalize(V + L);
	float distance    = length(light.direction);
	float attenuation = 1.0 / (distance * distance);
	vec3 radiance     = light.diffuse * attenuation * light.intensity;        
	
	// cook-torrance brdf
	float NDF = DistributionGGX(N, H, roughness);        
	float G   = GeometrySmith(N, V, L, roughness);      
	vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       
	
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - metallic;	  
	
	vec3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
	vec3 specular     = numerator / max(denominator, 0.001);  
		
	// add to outgoing radiance Lo
	float NdotL = max(dot(N, L), 0.0);                
	Lo += (kD * Albedo / PI + specular) * radiance * NdotL;  
  
    vec3 ambient = vec3(0.03) * Albedo * ao;
    vec3 color = ambient + Lo;
	   
    return color;
}


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewPos, vec3 fragPos, vec3 color) {
	vec3 lightDir = normalize(-light.direction);
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 norm = normalize(normal);

	vec3 ambient = light.ambient;

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff;

	// Specular
    vec3 reflectDir = reflect(-lightDir, norm);  
	//vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);    
    vec3 specular = light.specular * spec;  
	

	return (ambient + diffuse + specular) * color;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}


float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / max(denom, 0.001);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}