#version 330 core

struct PointLight {
	bool drawShadow;
	float intensity;
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;

	float radius;
	samplerCube shadowCubeMap;
};


float ShadowPointCalculation(PointLight light, vec3 fragPos);


vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 color) {
	vec3 surfaceToLight = light.position - fragPos;
	float distance = length(surfaceToLight);

	float attenuation = 0.0;
	attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

  	
    // Diffuse 
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);    
    
    // Specular
    vec3 reflectDir = reflect(-lightDir, normal);  
	vec3 halfWayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfWayDir), 0.0), 256.0f);
    

	vec3 ambient = light.ambient * color.rgb;
	vec3 diffuse = light.diffuse * diff *  color.rgb;
	vec3 specular = light.specular * spec * color.rgb;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;	

	float shadow = 0.0;
	if(light.drawShadow) {
		shadow = ShadowPointCalculation(light, fragPos);
	}
    return (ambient + (1.0 - shadow) * (diffuse + specular));
}

float ShadowPointCalculation(PointLight light, vec3 fragPos) {
	vec3 fragToLight = fragPos - light.position;
	float closestDepth = texture(light.shadowCubeMap, fragToLight).r;
	closestDepth *= light.radius;
	float currentDepth = length(fragToLight);
	float shadow  = 0.0;
	float bias    = 0.05; 
	float samples = 4.0;
	float offset  = 0.01;
	for(float x = -offset; x < offset; x += offset / (samples * 0.5))
	{
		for(float y = -offset; y < offset; y += offset / (samples * 0.5))
		{
			for(float z = -offset; z < offset; z += offset / (samples * 0.5))
			{
				float closestDepth = texture(light.shadowCubeMap, fragToLight + vec3(x, y, z)).r; 
				closestDepth *= light.radius;   // Undo mapping [0;1]
				if(currentDepth - bias > closestDepth)
					shadow += 1.0;
			}
		}
	}
	shadow /= (samples * samples * samples);
	return shadow;
}
