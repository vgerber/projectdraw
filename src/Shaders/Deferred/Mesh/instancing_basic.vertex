#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec4 color;
layout (location = 4) in mat4 instanceModel;

layout (std140) uniform Matrices {
	uniform mat4 view;
	uniform mat4 projection;
	uniform float farPlane;
};

out VS_OUT {
	vec2 TexCoords;
	vec3 Normal;
	vec3 FragPos;
	vec4 Color;
	float Depth;
} vs_out;

uniform vec3 viewPos;

//uniform vec3 lightPos;

void main() {
	gl_Position = projection * view * instanceModel * vec4(position.xyz, 1.0f);
	vs_out.TexCoords = texCoord;
	vs_out.Normal = mat3(transpose(inverse(instanceModel))) * normal;
	vs_out.FragPos = vec3(instanceModel * vec4(position, 1.0f));
	vs_out.Color = color;
	vs_out.Depth =  -(view * instanceModel * vec4(position.xyz, 1.0f)).z / farPlane;

}